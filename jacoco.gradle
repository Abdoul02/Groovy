apply plugin: 'jacoco'

jacoco {
    toolVersion = '0.8.5'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

task jacocoReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {

    reports {
        xml.enabled = true
        html.enabled = true
        html.destination file("${rootProject.buildDir}/coverage-report")
    }

    def javaClasses = []
    def kotlinClasses = []
    def javaSrc = []
    def kotlinSrc = []
    def execution = []

    def fileFilter = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            '**/*Fragment*.*',
            '**/*Activity*.*',
            '**/*View.*',
            'android/**/*.*',
            '**/*$*$*.*', // Anonymous classes generated by kotlin
            '**/*Module.*', // dagger
            '**/*Module.Companion.*', // dagger
            '**/*Factory.*', // Hilt
            '**/*Hilt_*', // Hilt
            '**/*_HiltComponents*', // Hilt
            '**/*_MembersInjector.class', // dagger
            '**/Dagger*Component.class', // dagger
            '**/Dagger*Subcomponent*.class', // dagger
            '**/*Subcomponent$Builder.class', // dagger
            '**/Dagger*Component$Builder.class', // dagger
            '**/*Module_*Factory.class', // dagger
            '**/com.abdoul.groovy*.di/**',  //dagger
            '**/com.abdoul.groovy*.model/**'
    ]

    rootProject.subprojects.each { proj ->
        javaClasses << fileTree(dir: "$proj.buildDir/intermediates/javac/debug", excludes: fileFilter)
        kotlinClasses << fileTree(dir: "$proj.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
        javaSrc << "$proj.projectDir/src/main/java"
        kotlinSrc << "$proj.projectDir/src/main/kotlin"
        execution << fileTree(dir: proj.buildDir, includes: [
                'jacoco/testDebugUnitTest.exec',
                'outputs/code-coverage/connected/*coverage.ec'
        ])
    }

    sourceDirectories.from = files([javaSrc, kotlinSrc])
    classDirectories.from = files([javaClasses, kotlinClasses])
    executionData { files(execution) }
}